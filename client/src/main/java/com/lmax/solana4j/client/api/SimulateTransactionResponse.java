package com.lmax.solana4j.client.api;

import java.util.List;

/**
 * Represents the response of simulating a transaction on the blockchain.
 */
public interface SimulateTransactionResponse
{

    /**
     * Returns the error information resulting from the transaction simulation, if any.
     *
     * @return an object representing the error, or {@code null} if the simulation was successful
     */
    Object getErr();

    /**
     * Returns the list of log messages generated during the transaction simulation.
     *
     * @return a list of log messages as strings
     */
    List<String> getLogs();

    /**
     * Returns information about any accounts involved in the transaction.
     *
     * @return a list of {@link AccountInfo} objects representing the account information.
     */
    List<AccountInfo> getAccounts();

    /**
     * Returns the list of inner instructions executed during the transaction simulation.
     *
     * @return a list of {@link TransactionResponse.InnerInstruction} objects representing the inner instructions
     */
    List<TransactionResponse.InnerInstruction> getInnerInstructions();

    /**
     * Returns the replacement blockhash used during the transaction simulation.
     *
     * @return a {@link Blockhash} object representing the replacement blockhash, or {@code null} if no replacement blockhash
     */
    Blockhash getReplacementBlockhash();

    /**
     * Returns any return data generated by an instruction during the transaction simulation.
     *
     * @return a {@link Data} object representing the return data, or {@code null} if no return data
     */
    Data getReturnData();

    /**
     * Returns the number of compute units consumed during the transaction simulation.
     *
     * @return the number of compute units consumed
     */
    int getUnitsConsumed();

    /**
     * Represents the return data generated by an instruction during the transaction simulation.
     */
    interface Data
    {

        /**
         * Returns the program id that generated the return data.
         *
         * @return the base-58 encoded string representing the program id
         */
        String getProgramId();

        /**
         * Returns the data returned by the instruction during the transaction simulation.
         * The first element of the list contains the data and the second the encoding scheme used to encode the data.
         *
         * @return a list containing the encoded account information data and the encoding scheme
         */
        List<String> getData();
    }
}