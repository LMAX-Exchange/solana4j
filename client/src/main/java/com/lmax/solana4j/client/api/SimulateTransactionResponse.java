package com.lmax.solana4j.client.api;

import java.util.List;

/**
 * Represents the response from simulating a transaction on the Solana blockchain.
 * This interface provides access to various details resulting from the simulation,
 * including errors, logs, account information, inner instructions, replacement blockhash,
 * return data, and the number of compute units consumed.
 */
public interface SimulateTransactionResponse
{

    /**
     * Retrieves the error information resulting from the transaction simulation, if any.
     * If the simulation was successful, this method returns {@code null}.
     *
     * @return an object representing the error, or {@code null} if the simulation was successful
     */
    Object getErr();

    /**
     * Retrieves the list of log messages generated during the transaction simulation.
     * These logs provide insights into the execution flow and can be useful for debugging.
     *
     * @return a list of log messages as strings
     */
    List<String> getLogs();

    /**
     * Retrieves the account information data resulting from the transaction simulation.
     * This includes details about the accounts involved in the transaction.
     *
     * @return an {@link AccountInfo.AccountInfoData} object representing the account information
     */
    AccountInfo.AccountInfoData getAccounts();

    /**
     * Retrieves the list of inner instructions executed during the transaction simulation.
     * Inner instructions are program invocations that occur within the main transaction.
     *
     * @return a list of {@link TransactionResponse.InnerInstruction} objects representing the inner instructions
     */
    List<TransactionResponse.InnerInstruction> getInnerInstructions();

    /**
     * Retrieves the replacement blockhash used during the transaction simulation.
     * The blockhash ensures the transaction is processed within a specific timeframe
     * and prevents it from being replayed.
     *
     * @return a {@link Blockhash} object representing the replacement blockhash
     */
    Blockhash getReplacementBlockhash();

    /**
     * Retrieves the return data generated by an instruction during the transaction simulation.
     * This data includes the program ID and the associated data returned by the instruction.
     *
     * @return a {@link Data} object representing the return data
     */
    Data getReturnData();

    /**
     * Retrieves the number of compute units consumed during the transaction simulation.
     * Compute units represent the computational resources used to process the transaction.
     *
     * @return the number of compute units consumed
     */
    int getUnitsConsumed();

    /**
     * Represents the return data generated by an instruction during the transaction simulation.
     * This interface provides access to the program ID and the associated data.
     */
    interface Data
    {

        /**
         * Retrieves the program ID that generated the return data.
         * The program ID is a base-58 encoded string representing the program's public key.
         *
         * @return the base-58 encoded string representing the program ID
         */
        String getProgramId();

        /**
         * Retrieves the data returned by the instruction during the transaction simulation.
         * This data is represented as a list of base-64 encoded strings.
         *
         * @return a list of base-64 encoded strings representing the return data
         */
        List<String> getData();
    }
}