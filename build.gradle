plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.jreleaser' version '1.14.0'
}

group = 'com.lmax'
version = '1.0.0'

repositories {
    mavenCentral()
}

checkstyle {
    toolVersion = '10.4'
    configFile = file('config/checkstyle/checkstyle.xml')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    solanaClientMain {
        java {
            srcDir file('solana-client/src/main/java')
        }
    }
    solanaClientTest {
        compileClasspath += sourceSets.solanaClientMain.output
        runtimeClasspath += sourceSets.solanaClientMain.output
        java {
            srcDir file('solana-client/src/test/java')
        }
    }
    solanaMessageEncodingMain {
        java {
            srcDir file('solana-message-encoding/src/main/java')
        }
    }
    solanaMessageEncodingTestSupport {
        java {
            compileClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaClientMain.output
            srcDir file('solana-message-encoding/src/test-support/java')
        }
    }
    solanaMessageEncodingTest {
        java {
            compileClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaMessageEncodingTestSupport.output
            runtimeClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaMessageEncodingTestSupport.output
            srcDir file('solana-message-encoding/src/test/java')
        }
        resources.srcDir file('src/test/resources')
    }
    solanaMessageEncodingIntegrationTest {
        java {
            compileClasspath += sourceSets.solanaMessageEncodingTestSupport.output + sourceSets.solanaClientMain.output
            runtimeClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaMessageEncodingTestSupport.output + sourceSets.solanaClientMain.output
            srcDir file('solana-message-encoding/src/integration-test/java')
        }
        resources.srcDir file('solana-message-encoding/src/integration-test/resources')
    }
    solanaMessageEncodingJmhTest {
        java {
            compileClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaMessageEncodingTestSupport.output
            runtimeClasspath += sourceSets.solanaMessageEncodingMain.output + sourceSets.solanaMessageEncodingTestSupport.output
            srcDir file('solana-message-encoding/src/jmh-test/java')
        }
    }
}

dependencies {
    checkstyle 'com.puppycrawl.tools:checkstyle:10.4'

    solanaClientMainImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    solanaClientTestImplementation 'org.assertj:assertj-core:3.26.3'
    solanaClientTestImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    solanaClientTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'

    // test support dependencies
    solanaMessageEncodingTestSupportImplementation 'com.lmax:simple-dsl:3.0.0'
    solanaMessageEncodingTestSupportImplementation 'org.assertj:assertj-core:3.26.3'
    solanaMessageEncodingTestSupportImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    solanaMessageEncodingTestSupportImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    solanaMessageEncodingTestSupportImplementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    solanaMessageEncodingTestSupportImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'

    // test dependencies
    solanaMessageEncodingTestImplementation 'org.assertj:assertj-core:3.26.3'
    solanaMessageEncodingTestImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    solanaMessageEncodingTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    solanaMessageEncodingTestImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    solanaMessageEncodingTestImplementation 'org.slf4j:slf4j-api:2.0.13'
    solanaMessageEncodingTestImplementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    solanaMessageEncodingTestImplementation 'net.i2p.crypto:eddsa:0.3.0'
    solanaMessageEncodingTestImplementation 'org.bitcoinj:bitcoinj-core:0.16.3'

    // integration test dependencies
    solanaMessageEncodingIntegrationTestImplementation 'org.testcontainers:testcontainers:1.19.8'
    solanaMessageEncodingIntegrationTestImplementation 'com.lmax:simple-dsl:3.0.0'
    solanaMessageEncodingIntegrationTestImplementation 'org.assertj:assertj-core:3.26.3'
    solanaMessageEncodingIntegrationTestImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    solanaMessageEncodingIntegrationTestImplementation 'com.fasterxml.jackson.core:jackson-core:2.17.2'
    solanaMessageEncodingIntegrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    solanaMessageEncodingIntegrationTestImplementation 'org.apache.httpcomponents:httpclient:4.5.14'
    solanaMessageEncodingIntegrationTestImplementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    solanaMessageEncodingIntegrationTestImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    solanaMessageEncodingIntegrationTestImplementation 'org.slf4j:slf4j-api:2.0.13'

    // jmh test dependencies
    solanaMessageEncodingJmhTestImplementation 'org.openjdk.jmh:jmh-core:1.37'
    solanaMessageEncodingJmhTestImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    solanaMessageEncodingJmhTestImplementation 'net.i2p.crypto:eddsa:0.3.0'
    solanaMessageEncodingJmhTestImplementation 'org.bitcoinj:bitcoinj-core:0.16.3'
    solanaMessageEncodingJmhTestAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
}

task setUpGitHooks(type: Exec, description: 'Add a pre-commit git hook that runs gradle check & test tasks') {
    def hooksFolder = file('.githooks').getAbsolutePath()
    commandLine 'git', 'config', 'core.hooksPath', hooksFolder
}

task solanaMessageEncodingTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the solana message encoding unit tests .'
    group = 'verification'
    testClassesDirs = sourceSets.solanaMessageEncodingTest.output.classesDirs
    classpath = sourceSets.solanaMessageEncodingTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

task solanaClientTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the solana client unit tests .'
    group = 'verification'
    testClassesDirs = sourceSets.solanaClientTest.output.classesDirs
    classpath = sourceSets.solanaClientTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
}

task solanaMessageEncodingIntegrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs the solana message encoding integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.solanaMessageEncodingIntegrationTest.output.classesDirs
    classpath = sourceSets.solanaMessageEncodingIntegrationTest.runtimeClasspath + sourceSets.solanaMessageEncodingTestSupport.runtimeClasspath
    shouldRunAfter test
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
    }
    maxHeapSize = "1g"
}

check.dependsOn solanaClientTest
check.dependsOn solanaMessageEncodingTest
check.dependsOn solanaMessageEncodingIntegrationTest

tasks.processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// FIXME: including in gradle.yaml and release.yaml
javadoc {
    title = 'solana4j'

    source = fileTree('solana-message-encoding/src/main/java').include('**/*.java')

    options.addStringOption('XDignore.symbol.file', '-quiet')
    options.author = true
    options.bottom = "<i>Copyright &#169; 2011 - ${Calendar.instance[Calendar.YEAR]} LMAX Ltd. All Rights Reserved.</i>"
    options.use = true
    options.version = true
    options.showFromPublic()
    options.overview = file('overview.html').absolutePath
}

jreleaser {
    files {
        active = 'ALWAYS'
        glob {
            pattern = 'build/staging-deploy/**/*.jar'
            pattern = 'build/staging-deploy/**/*.pom'
            pattern = 'build/staging-deploy/**/*.module'
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                    applyMavenCentralRules = true
                }
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.lmax'
            artifactId = 'solana4j'

            from components.java

            pom {
                name = 'solana4j'
                description = 'A Java library for natively interacting with the Solana blockchain.'
                url = 'https://github.com/LMAX-Exchange/solana4j'
                inceptionYear = '2023'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'jamesm'
                        name = 'Matthew James'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/LMAX-Exchange/solana4j.git'
                    developerConnection = 'scm:git:ssh://github.com/LMAX-Exchange/solana4j.git'
                    url = 'https://github.com/LMAX-Exchange/solana4j'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

